{"ast":null,"code":"var _jsxFileName = \"/home/pedrolocal/Desktop/Projects/ForumProject/forum-app/src/containers/QuestionsPage.js\";\nimport React, { PureComponent } from 'react';\nimport QuestionsSummary from '../components/QuestionsSummary/QuestionsSummary';\nimport QuestionDetailPage from './QuestionDetailPage';\nimport './QuestionsPage.css';\nimport { listQuestions, createQuestion } from '../services/Question';\n\nclass QuestionsPage extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.fetchQuestions = async () => {\n      const questions = await listQuestions();\n\n      if (!questions.data[0] === undefined && !questions.data.length === 0) {\n        console.log(questions.data);\n        this.setState({\n          questions: [...questions.data]\n        });\n      }\n    };\n\n    this.saveQuestion = async (newQuestion, username) => {};\n\n    this.fetchQuestionsNumberOfAnswers = async () => {};\n\n    this.onBackButtonClicked = () => {\n      this.setState({\n        selectedQuestionItem: {}\n      });\n      this.setState({\n        viewQuestion: false\n      });\n    };\n\n    this.onQuestionItemSelected = id => {\n      const questionItemSelected = this.state.questions.filter(question => question.id === id);\n      this.setState({\n        selectedQuestionItem: questionItemSelected[0]\n      });\n      this.setState({\n        viewQuestion: true\n      });\n    };\n\n    this.obtainQuestionsSummaryList = questions => {\n      if (questions.length !== 0) {\n        const questionsList = [...questions];\n        const questionSummary = questionsList.map(question => {\n          return {\n            questionId: question.id,\n            question: question.text,\n            answers: question.answers.length\n          };\n        }) || [];\n        return questionSummary;\n      }\n\n      return [];\n    };\n\n    this.onNewQuestionChange = event => {\n      this.setState({\n        newQuestion: event.target.value\n      });\n    };\n\n    this.onNewQuestionSubmit = (event, username) => {\n      if (window.confirm('Tem certeza que deseja enviar pergunta?')) {\n        this.saveQuestion(this.state.newQuestion, username);\n      }\n\n      event.preventDefault();\n    };\n\n    this.componentDidMount = async () => {\n      await this.fetchQuestions();\n    };\n\n    this.state = {\n      questions: [],\n      selectedQuestionItem: {},\n      viewQuestionDetail: false,\n      newQuestion: ''\n    };\n  }\n\n  render() {\n    const {\n      questions,\n      viewQuestionDetail,\n      selectedQuestionItem\n    } = this.state;\n    console.log(questions);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"QuestionsPage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 12\n      }\n    }, viewQuestionDetail ? /*#__PURE__*/React.createElement(QuestionDetailPage, {\n      backButtonClicked: this.onBackButtonClicked,\n      selectedQuestion: selectedQuestionItem,\n      onNewAnswerChange: this.onNewAnswerChange,\n      onNewAnswerSubmit: this.onNewAnswerSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 7\n      }\n    }) : /*#__PURE__*/React.createElement(QuestionsSummary, {\n      onQuestionSelected: this.onQuestionItemSelected,\n      newQuestion: this.state.newQuestion,\n      onNewQuestionChange: this.onNewQuestionChange,\n      onNewQuestionSubmit: this.onNewQuestionSubmit,\n      questionsSummaryList: this.obtainQuestionsSummaryList(questions),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nexport default QuestionsPage;","map":{"version":3,"sources":["/home/pedrolocal/Desktop/Projects/ForumProject/forum-app/src/containers/QuestionsPage.js"],"names":["React","PureComponent","QuestionsSummary","QuestionDetailPage","listQuestions","createQuestion","QuestionsPage","constructor","props","fetchQuestions","questions","data","undefined","length","console","log","setState","saveQuestion","newQuestion","username","fetchQuestionsNumberOfAnswers","onBackButtonClicked","selectedQuestionItem","viewQuestion","onQuestionItemSelected","id","questionItemSelected","state","filter","question","obtainQuestionsSummaryList","questionsList","questionSummary","map","questionId","text","answers","onNewQuestionChange","event","target","value","onNewQuestionSubmit","window","confirm","preventDefault","componentDidMount","viewQuestionDetail","render","onNewAnswerChange","onNewAnswerSubmit"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport QuestionsSummary from '../components/QuestionsSummary/QuestionsSummary';\nimport QuestionDetailPage from './QuestionDetailPage';\nimport './QuestionsPage.css'\n\nimport { listQuestions, createQuestion } from '../services/Question';\n\nclass QuestionsPage extends PureComponent{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\t\t\tquestions: [],\n\t\t  \tselectedQuestionItem: {},\n\t\t\tviewQuestionDetail: false,\n\t\t\tnewQuestion: ''\n        };\n      }\n\n\n\tfetchQuestions = async () => {\n\t\tconst questions = await listQuestions();\n\t\tif(!questions.data[0] === undefined && !questions.data.length === 0){\n\t\t\tconsole.log(questions.data)\n\t\t\tthis.setState({ questions: [...questions.data]})\n\t\t}\t\t\n\t};\n\n\tsaveQuestion = async (newQuestion, username) => {\n\n\t}\n\n\tfetchQuestionsNumberOfAnswers = async () =>{\n\n\t};\n\n\n\tonBackButtonClicked = () =>{\n\t\tthis.setState({selectedQuestionItem: {} });\n\t\tthis.setState({ viewQuestion: false});\n\t};\n\t  \n\tonQuestionItemSelected = (id)=>{\n\t\tconst questionItemSelected = this.state.questions.filter( question => question.id === id);\n\t\tthis.setState({selectedQuestionItem: questionItemSelected[0]});\n\t\tthis.setState({ viewQuestion: true});\n\t};\n\n\n    obtainQuestionsSummaryList = (questions) => {\n        if(questions.length !== 0 ){\n            const questionsList = [...questions];\n            const questionSummary = questionsList.map( question => {\n                return { questionId: question.id , question: question.text, answers: question.answers.length }\n            }) || [];\n         \n\n            return questionSummary;\n        }\n        return [];\n    };\n\t\n\t\n\t\n\n\tonNewQuestionChange = (event) =>{\n\t\tthis.setState({newQuestion: event.target.value});\n\t}\n\n\tonNewQuestionSubmit = (event, username) => {\n\t\tif (window.confirm('Tem certeza que deseja enviar pergunta?')){\n\t\t\tthis.saveQuestion(this.state.newQuestion, username)\n\t\t}\n\t\tevent.preventDefault();\n\t\t\n\t};\n\n    componentDidMount = async () => {\n\t\tawait this.fetchQuestions();\n    }\n\n    render(){\n\t\tconst { questions, viewQuestionDetail , selectedQuestionItem} = this.state;\n\t\tconsole.log(questions)\n        return(\n           <div className='QuestionsPage'>\n\t\t\t   {viewQuestionDetail? \n\t\t\t   <QuestionDetailPage \n\t\t\t\t\tbackButtonClicked={this.onBackButtonClicked}\n\t\t\t\t\tselectedQuestion={selectedQuestionItem}\n\t\t\t\t\tonNewAnswerChange={this.onNewAnswerChange}\n\t\t\t\t\tonNewAnswerSubmit={this.onNewAnswerSubmit} /> \n\t\t\t   :  \n\t\t\t   <QuestionsSummary\n\t\t\t\t\tonQuestionSelected={this.onQuestionItemSelected}\n\t\t\t\t\tnewQuestion={this.state.newQuestion} \n\t\t\t\t\tonNewQuestionChange={this.onNewQuestionChange}\n\t\t\t\t\tonNewQuestionSubmit = {this.onNewQuestionSubmit}   \n                \tquestionsSummaryList={this.obtainQuestionsSummaryList(questions)} /> }\n           </div>\n        );\n    \n    };\n}\n\nexport default QuestionsPage;"]},"metadata":{},"sourceType":"module"}