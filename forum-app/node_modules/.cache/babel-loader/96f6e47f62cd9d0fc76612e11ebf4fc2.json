{"ast":null,"code":"var _jsxFileName = \"/home/pedrolocal/Desktop/Projects/ForumProject/forum-app/src/containers/QuestionsPage.js\";\nimport React, { PureComponent } from \"react\";\nimport QuestionsSummary from \"../components/QuestionsSummary/QuestionsSummary\";\nimport ApiError from \"../hoc/error/ApiError\";\nimport { listQuestions, createQuestion } from \"../services/Question\";\n\nclass QuestionsPage extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.fetchQuestions = async () => {\n      const response = await listQuestions();\n\n      if (response.error) {\n        this.setState({\n          errorMessage: response.message\n        });\n        this.setState({\n          error: true\n        });\n      } else {\n        this.setState({\n          questions: [...response.questions]\n        });\n        this.setState({\n          error: false\n        });\n      }\n    };\n\n    this.saveQuestion = async (newQuestion, username) => {\n      const new_question = {\n        text: newQuestion,\n        user: username\n      };\n      const response = await createQuestion(new_question);\n\n      if (response.error) {\n        this.setState({\n          errorMessage: response.message\n        });\n        this.setState({\n          error: true\n        });\n      } else {\n        this.setState({\n          error: false\n        });\n      }\n    };\n\n    this.onQuestionItemSelected = id => {\n      const questionItemSelected = this.state.questions.filter(question => question.id === id);\n      this.props.onQuestionItemSelected(questionItemSelected[0]);\n    };\n\n    this.onNewQuestionChange = value => {\n      this.setState({\n        newQuestion: value\n      });\n    };\n\n    this.onNewQuestionSubmit = async (event, username) => {\n      event.preventDefault();\n\n      if (window.confirm(\"Tem certeza que deseja enviar pergunta?\")) {\n        await this.saveQuestion(this.state.newQuestion, username);\n        await this.fetchQuestions();\n        this.setState({\n          newQuestion: \"\"\n        });\n      }\n    };\n\n    this.componentDidUpdate = async (prevProps, prevState) => {\n      if (prevState.viewQuestionDetail !== this.state.viewQuestionDetail) {\n        await this.fetchQuestions();\n      }\n    };\n\n    this.componentDidMount = async () => {\n      await this.fetchQuestions();\n    };\n\n    this.state = {\n      questions: [],\n      newQuestion: \"\",\n      error: false,\n      errorMessage: \"\"\n    };\n  }\n\n  render() {\n    const {\n      questions,\n      newQuestion,\n      error,\n      errorMessage\n    } = this.state;\n    return /*#__PURE__*/React.createElement(ApiError, {\n      error: error,\n      message: errorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(QuestionsSummary, {\n      onQuestionSelected: this.onQuestionItemSelected,\n      newQuestion: newQuestion,\n      onNewQuestionChange: this.onNewQuestionChange,\n      onNewQuestionSubmit: this.onNewQuestionSubmit,\n      questions: questions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }\n    }));\n  }\n\n}\n\nexport default QuestionsPage;","map":{"version":3,"sources":["/home/pedrolocal/Desktop/Projects/ForumProject/forum-app/src/containers/QuestionsPage.js"],"names":["React","PureComponent","QuestionsSummary","ApiError","listQuestions","createQuestion","QuestionsPage","constructor","props","fetchQuestions","response","error","setState","errorMessage","message","questions","saveQuestion","newQuestion","username","new_question","text","user","onQuestionItemSelected","id","questionItemSelected","state","filter","question","onNewQuestionChange","value","onNewQuestionSubmit","event","preventDefault","window","confirm","componentDidUpdate","prevProps","prevState","viewQuestionDetail","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { PureComponent } from \"react\";\nimport QuestionsSummary from \"../components/QuestionsSummary/QuestionsSummary\";\nimport ApiError from \"../hoc/error/ApiError\";\n\nimport { listQuestions, createQuestion } from \"../services/Question\";\n\nclass QuestionsPage extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      questions: [],\n      newQuestion: \"\",\n      error: false,\n      errorMessage: \"\",\n    };\n  }\n\n  fetchQuestions = async () => {\n    const response = await listQuestions();\n    if (response.error) {\n      this.setState({ errorMessage: response.message });\n      this.setState({ error: true });\n    } else {\n      this.setState({ questions: [...response.questions] });\n      this.setState({ error: false });\n    }\n  };\n\n  saveQuestion = async (newQuestion, username) => {\n    const new_question = { text: newQuestion, user: username };\n    const response = await createQuestion(new_question);\n    if (response.error) {\n      this.setState({ errorMessage: response.message });\n      this.setState({ error: true });\n    } else {\n      this.setState({ error: false });\n    }\n  };\n\n  onQuestionItemSelected = (id) => {\n    const questionItemSelected = this.state.questions.filter(\n      (question) => question.id === id\n    );\n    this.props.onQuestionItemSelected(questionItemSelected[0]);\n  };\n\n  onNewQuestionChange = (value) => {\n    this.setState({ newQuestion: value });\n  };\n\n  onNewQuestionSubmit = async (event, username) => {\n    event.preventDefault();\n    if (window.confirm(\"Tem certeza que deseja enviar pergunta?\")) {\n      await this.saveQuestion(this.state.newQuestion, username);\n      await this.fetchQuestions();\n      this.setState({ newQuestion: \"\" });\n    }\n  };\n\n  componentDidUpdate = async (prevProps, prevState) => {\n    if (prevState.viewQuestionDetail !== this.state.viewQuestionDetail) {\n      await this.fetchQuestions();\n    }\n  };\n\n  componentDidMount = async () => {\n    await this.fetchQuestions();\n  };\n\n  render() {\n    const { questions, newQuestion, error, errorMessage } = this.state;\n    return (\n      <ApiError error={error} message={errorMessage}>\n        <QuestionsSummary\n          onQuestionSelected={this.onQuestionItemSelected}\n          newQuestion={newQuestion}\n          onNewQuestionChange={this.onNewQuestionChange}\n          onNewQuestionSubmit={this.onNewQuestionSubmit}\n          questions={questions}\n        />\n      </ApiError>\n    );\n  }\n}\n\nexport default QuestionsPage;\n"]},"metadata":{},"sourceType":"module"}