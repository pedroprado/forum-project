{"ast":null,"code":"var _jsxFileName = \"/home/pedrolocal/Desktop/Projects/ForumProject/forum-app/src/containers/QuestionsPage.js\";\nimport React, { PureComponent } from 'react';\nimport QuestionsSummary from '../components/QuestionsSummary/QuestionsSummary';\nimport QuestionDetailPage from './QuestionDetailPage';\nimport './QuestionsPage.css';\nimport { listQuestions, createQuestion } from '../services/Question';\nimport { findAllByQuestionId, createAnswer } from '../services/Answer';\n\nclass QuestionsPage extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.fetchQuestions = async () => {\n      const questions = await listQuestions();\n      let new_questions = [];\n\n      for (const question of questions) {\n        const fetch_answers = await findAllByQuestionId(question.id);\n        const new_question = { ...question,\n          answers: [...fetch_answers]\n        };\n        new_questions.push(new_question);\n      }\n\n      ;\n      this.setState({\n        questions: [...questions]\n      });\n    };\n\n    this.saveQuestion = async (newQuestion, username) => {};\n\n    this.fetchQuestionsNumberOfAnswers = async () => {};\n\n    this.onBackButtonClicked = () => {\n      this.setState({\n        viewQuestionDetail: false\n      });\n    };\n\n    this.onQuestionItemSelected = id => {\n      const questionItemSelected = this.state.questions.filter(question => question.id === id);\n      this.setState({\n        selectedQuestionItem: questionItemSelected[0]\n      });\n      this.setState({\n        viewQuestionDetail: true\n      });\n    };\n\n    this.obtainQuestionsSummaryList = questions => {\n      if (questions.length !== 0) {\n        const questionsList = [...questions];\n        const questionSummary = questionsList.map(question => {\n          return {\n            questionId: question.id,\n            question: question.text,\n            answers: question.answers.length\n          };\n        }) || [];\n        return questionSummary;\n      }\n\n      return [];\n    };\n\n    this.onNewQuestionChange = event => {\n      this.setState({\n        newQuestion: event.target.value\n      });\n    };\n\n    this.onNewQuestionSubmit = (event, username) => {\n      if (window.confirm('Tem certeza que deseja enviar pergunta?')) {\n        this.saveQuestion(this.state.newQuestion, username);\n      }\n\n      event.preventDefault();\n    };\n\n    this.componentDidMount = () => {\n      this.fetchQuestions();\n    };\n\n    this.state = {\n      questions: [],\n      selectedQuestionItem: {},\n      viewQuestionDetail: false,\n      newQuestion: ''\n    };\n  }\n\n  render() {\n    const {\n      questions,\n      viewQuestionDetail,\n      selectedQuestionItem\n    } = this.state;\n    console.log(questions);\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"QuestionsPage\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 12\n      }\n    }, viewQuestionDetail ? /*#__PURE__*/React.createElement(QuestionDetailPage, {\n      backButtonClicked: this.onBackButtonClicked,\n      selectedQuestion: selectedQuestionItem,\n      questionId: selectedQuestionItem.id,\n      onNewAnswerChange: this.onNewAnswerChange,\n      onNewAnswerSubmit: this.onNewAnswerSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }\n    }) : /*#__PURE__*/React.createElement(QuestionsSummary, {\n      onQuestionSelected: this.onQuestionItemSelected,\n      newQuestion: this.state.newQuestion,\n      onNewQuestionChange: this.onNewQuestionChange,\n      onNewQuestionSubmit: this.onNewQuestionSubmit,\n      questionsSummaryList: this.obtainQuestionsSummaryList(questions),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 7\n      }\n    }));\n  }\n\n}\n\nexport default QuestionsPage;","map":{"version":3,"sources":["/home/pedrolocal/Desktop/Projects/ForumProject/forum-app/src/containers/QuestionsPage.js"],"names":["React","PureComponent","QuestionsSummary","QuestionDetailPage","listQuestions","createQuestion","findAllByQuestionId","createAnswer","QuestionsPage","constructor","props","fetchQuestions","questions","new_questions","question","fetch_answers","id","new_question","answers","push","setState","saveQuestion","newQuestion","username","fetchQuestionsNumberOfAnswers","onBackButtonClicked","viewQuestionDetail","onQuestionItemSelected","questionItemSelected","state","filter","selectedQuestionItem","obtainQuestionsSummaryList","length","questionsList","questionSummary","map","questionId","text","onNewQuestionChange","event","target","value","onNewQuestionSubmit","window","confirm","preventDefault","componentDidMount","render","console","log","onNewAnswerChange","onNewAnswerSubmit"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport QuestionsSummary from '../components/QuestionsSummary/QuestionsSummary';\nimport QuestionDetailPage from './QuestionDetailPage';\nimport './QuestionsPage.css'\n\nimport { listQuestions, createQuestion } from '../services/Question';\nimport { findAllByQuestionId, createAnswer } from '../services/Answer';\n\n\nclass QuestionsPage extends PureComponent{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\t\t\tquestions: [],\n\t\t  \tselectedQuestionItem: {},\n\t\t\tviewQuestionDetail: false,\n\t\t\tnewQuestion: ''\n        };\n      }\n\n\n\tfetchQuestions = async () => {\n\t\tconst questions = await listQuestions();\n\t\tlet new_questions = [];\n\t\tfor(const question of questions) {\n\t\t\tconst fetch_answers = await findAllByQuestionId(question.id);\n\t\t\tconst new_question = { ...question, answers: [...fetch_answers]};\n\t\t\tnew_questions.push(new_question);\n\t\t};\t\n\t\tthis.setState({ questions: [...questions]})\t\n\t};\n\n\tsaveQuestion = async (newQuestion, username) => {\n\n\t}\n\n\tfetchQuestionsNumberOfAnswers = async () =>{\n\n\t};\n\n\n\tonBackButtonClicked = () =>{\n\t\tthis.setState({ viewQuestionDetail: false});\n\t};\n\t  \n\tonQuestionItemSelected = (id)=>{\n\t\tconst questionItemSelected = this.state.questions.filter( question => question.id === id);\n\t\tthis.setState({selectedQuestionItem: questionItemSelected[0]});\n\t\tthis.setState({ viewQuestionDetail: true});\n\t};\n\n\n    obtainQuestionsSummaryList = (questions) => {\n        if(questions.length !== 0 ){\n            const questionsList = [...questions];\n            const questionSummary = questionsList.map( question => {\n                return { questionId: question.id , question: question.text, answers: question.answers.length }\n            }) || [];\n         \n\n            return questionSummary;\n        }\n        return [];\n    };\n\n\tonNewQuestionChange = (event) =>{\n\t\tthis.setState({newQuestion: event.target.value});\n\t}\n\n\tonNewQuestionSubmit = (event, username) => {\n\t\tif (window.confirm('Tem certeza que deseja enviar pergunta?')){\n\t\t\tthis.saveQuestion(this.state.newQuestion, username)\n\t\t}\n\t\tevent.preventDefault();\n\t\t\n\t};\n\n    componentDidMount = () => {\n\t\tthis.fetchQuestions();\n    }\n\n    render(){\n\t\tconst { questions, viewQuestionDetail , selectedQuestionItem} = this.state;\n\t\tconsole.log(questions)\n        return(\n           <div className='QuestionsPage'>\n\t\t\t   {viewQuestionDetail? \n\t\t\t   <QuestionDetailPage \n\t\t\t\t\tbackButtonClicked={this.onBackButtonClicked}\n\t\t\t\t\tselectedQuestion={selectedQuestionItem}\n\t\t\t\t\tquestionId={selectedQuestionItem.id}\n\t\t\t\t\tonNewAnswerChange={this.onNewAnswerChange}\n\t\t\t\t\tonNewAnswerSubmit={this.onNewAnswerSubmit} /> \n\t\t\t   :  \n\t\t\t   <QuestionsSummary\n\t\t\t\t\tonQuestionSelected={this.onQuestionItemSelected}\n\t\t\t\t\tnewQuestion={this.state.newQuestion} \n\t\t\t\t\tonNewQuestionChange={this.onNewQuestionChange}\n\t\t\t\t\tonNewQuestionSubmit = {this.onNewQuestionSubmit}   \n                \tquestionsSummaryList={this.obtainQuestionsSummaryList(questions)} /> }\n           </div>\n        );\n    \n    };\n}\n\nexport default QuestionsPage;"]},"metadata":{},"sourceType":"module"}