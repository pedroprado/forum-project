{"ast":null,"code":"var _jsxFileName = \"/home/pedrolocal/Desktop/Projects/ForumProject/forum-app/src/containers/QuestionsPage.js\";\nimport React, { PureComponent } from 'react';\nimport QuestionsSummary from '../components/QuestionsSummary/QuestionsSummary';\nimport ApiError from '../hoc/error/ApiError';\nimport { listQuestions, createQuestion } from '../services/Question';\n\nclass QuestionsPage extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.fetchQuestions = async () => {\n      const response = await listQuestions();\n\n      if (response.error) {\n        this.setState({\n          errorMessage: response.message\n        });\n        this.setState({\n          error: true\n        });\n      } else {\n        this.setState({\n          questions: [...response.questions]\n        });\n        this.setState({\n          error: false\n        });\n      }\n    };\n\n    this.saveQuestion = async (newQuestion, username) => {\n      const new_question = {\n        text: newQuestion,\n        user: username\n      };\n      const response = await createQuestion(new_question);\n\n      if (response.error) {\n        this.setState({\n          errorMessage: response.message\n        });\n        this.setState({\n          error: true\n        });\n      } else {\n        this.setState({\n          error: false\n        });\n      }\n    };\n\n    this.onQuestionItemSelected = id => {\n      const questionItemSelected = this.state.questions.filter(question => question.id === id);\n      this.props.onQuestionItemSelected(questionItemSelected[0]);\n    };\n\n    this.onNewQuestionChange = value => {\n      this.setState({\n        newQuestion: value\n      });\n    };\n\n    this.onNewQuestionSubmit = async (event, username) => {\n      event.preventDefault();\n\n      if (window.confirm('Tem certeza que deseja enviar pergunta?')) {\n        await this.saveQuestion(this.state.newQuestion, username);\n        await this.fetchQuestions();\n        this.setState({\n          newQuestion: ''\n        });\n      }\n    };\n\n    this.componentDidUpdate = async (prevProps, prevState) => {\n      if (prevState.viewQuestionDetail !== this.state.viewQuestionDetail) {\n        await this.fetchQuestions();\n      }\n    };\n\n    this.componentDidMount = async () => {\n      await this.fetchQuestions();\n    };\n\n    this.state = {\n      questions: [],\n      newQuestion: '',\n      error: false,\n      errorMessage: ''\n    };\n  }\n\n  render() {\n    const {\n      questions,\n      newQuestion,\n      error,\n      errorMessage\n    } = this.state;\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(ApiError, {\n      error: error,\n      message: errorMessage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 5\n      }\n    }, /*#__PURE__*/React.createElement(QuestionsSummary, {\n      onQuestionSelected: this.onQuestionItemSelected,\n      newQuestion: newQuestion,\n      onNewQuestionChange: this.onNewQuestionChange,\n      onNewQuestionSubmit: this.onNewQuestionSubmit,\n      questions: questions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 5\n      }\n    })));\n  }\n\n}\n\nexport default QuestionsPage;","map":{"version":3,"sources":["/home/pedrolocal/Desktop/Projects/ForumProject/forum-app/src/containers/QuestionsPage.js"],"names":["React","PureComponent","QuestionsSummary","ApiError","listQuestions","createQuestion","QuestionsPage","constructor","props","fetchQuestions","response","error","setState","errorMessage","message","questions","saveQuestion","newQuestion","username","new_question","text","user","onQuestionItemSelected","id","questionItemSelected","state","filter","question","onNewQuestionChange","value","onNewQuestionSubmit","event","preventDefault","window","confirm","componentDidUpdate","prevProps","prevState","viewQuestionDetail","componentDidMount","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,gBAAP,MAA6B,iDAA7B;AACA,OAAOC,QAAP,MAAqB,uBAArB;AAEA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,sBAA9C;;AAEA,MAAMC,aAAN,SAA4BL,aAA5B,CAAyC;AAErCM,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAUtBC,cAVsB,GAUL,YAAY;AAC5B,YAAMC,QAAQ,GAAG,MAAMN,aAAa,EAApC;;AACA,UAAGM,QAAQ,CAACC,KAAZ,EAAkB;AACjB,aAAKC,QAAL,CAAc;AAAEC,UAAAA,YAAY,EAAEH,QAAQ,CAACI;AAAzB,SAAd;AACA,aAAKF,QAAL,CAAc;AAAED,UAAAA,KAAK,EAAG;AAAV,SAAd;AACA,OAHD,MAGK;AACJ,aAAKC,QAAL,CAAc;AAAEG,UAAAA,SAAS,EAAE,CAAC,GAAGL,QAAQ,CAACK,SAAb;AAAb,SAAd;AACA,aAAKH,QAAL,CAAc;AAAED,UAAAA,KAAK,EAAG;AAAV,SAAd;AACA;AACD,KAnBqB;;AAAA,SAqBtBK,YArBsB,GAqBP,OAAOC,WAAP,EAAoBC,QAApB,KAAiC;AAC/C,YAAMC,YAAY,GAAG;AAAEC,QAAAA,IAAI,EAAEH,WAAR;AAAqBI,QAAAA,IAAI,EAAEH;AAA3B,OAArB;AACA,YAAMR,QAAQ,GAAG,MAAML,cAAc,CAACc,YAAD,CAArC;;AACA,UAAGT,QAAQ,CAACC,KAAZ,EAAkB;AACjB,aAAKC,QAAL,CAAc;AAAEC,UAAAA,YAAY,EAAEH,QAAQ,CAACI;AAAzB,SAAd;AACA,aAAKF,QAAL,CAAc;AAAED,UAAAA,KAAK,EAAG;AAAV,SAAd;AACA,OAHD,MAGK;AACJ,aAAKC,QAAL,CAAc;AAAED,UAAAA,KAAK,EAAG;AAAV,SAAd;AACA;AACD,KA9BqB;;AAAA,SAgCtBW,sBAhCsB,GAgCIC,EAAD,IAAM;AAC9B,YAAMC,oBAAoB,GAAG,KAAKC,KAAL,CAAWV,SAAX,CAAqBW,MAArB,CAA6BC,QAAQ,IAAIA,QAAQ,CAACJ,EAAT,KAAgBA,EAAzD,CAA7B;AACA,WAAKf,KAAL,CAAWc,sBAAX,CAAkCE,oBAAoB,CAAC,CAAD,CAAtD;AACA,KAnCqB;;AAAA,SAqCtBI,mBArCsB,GAqCCC,KAAD,IAAU;AAC/B,WAAKjB,QAAL,CAAc;AAACK,QAAAA,WAAW,EAAEY;AAAd,OAAd;AACA,KAvCqB;;AAAA,SAyCtBC,mBAzCsB,GAyCA,OAAOC,KAAP,EAAcb,QAAd,KAA2B;AAChDa,MAAAA,KAAK,CAACC,cAAN;;AACA,UAAIC,MAAM,CAACC,OAAP,CAAe,yCAAf,CAAJ,EAA8D;AAC7D,cAAM,KAAKlB,YAAL,CAAkB,KAAKS,KAAL,CAAWR,WAA7B,EAA0CC,QAA1C,CAAN;AACA,cAAM,KAAKT,cAAL,EAAN;AACA,aAAKG,QAAL,CAAc;AAAEK,UAAAA,WAAW,EAAE;AAAf,SAAd;AACA;AACD,KAhDqB;;AAAA,SAkDtBkB,kBAlDsB,GAkDD,OAAOC,SAAP,EAAkBC,SAAlB,KAA+B;AACnD,UAAGA,SAAS,CAACC,kBAAV,KAAiC,KAAKb,KAAL,CAAWa,kBAA/C,EAAkE;AACjE,cAAM,KAAK7B,cAAL,EAAN;AACA;AACD,KAtDqB;;AAAA,SAwDnB8B,iBAxDmB,GAwDC,YAAY;AAClC,YAAM,KAAK9B,cAAL,EAAN;AACG,KA1DkB;;AAEf,SAAKgB,KAAL,GAAa;AAClBV,MAAAA,SAAS,EAAE,EADO;AAElBE,MAAAA,WAAW,EAAE,EAFK;AAGlBN,MAAAA,KAAK,EAAE,KAHW;AAIlBE,MAAAA,YAAY,EAAE;AAJI,KAAb;AAMH;;AAoDD2B,EAAAA,MAAM,GAAE;AACV,UAAM;AAAEzB,MAAAA,SAAF;AAAaE,MAAAA,WAAb;AAA0BN,MAAAA,KAA1B;AAAiCE,MAAAA;AAAjC,QAAkD,KAAKY,KAA7D;AACM,wBACG,uDACP,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEd,KAAjB;AAAwB,MAAA,OAAO,EAAEE,YAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACA,oBAAC,gBAAD;AACC,MAAA,kBAAkB,EAAE,KAAKS,sBAD1B;AAEC,MAAA,WAAW,EAAEL,WAFd;AAGC,MAAA,mBAAmB,EAAE,KAAKW,mBAH3B;AAIC,MAAA,mBAAmB,EAAI,KAAKE,mBAJ7B;AAKG,MAAA,SAAS,EAAEf,SALd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADA,CADO,CADH;AAYH;;AA5EoC;;AA+EzC,eAAeT,aAAf","sourcesContent":["import React, { PureComponent } from 'react';\nimport QuestionsSummary from '../components/QuestionsSummary/QuestionsSummary';\nimport ApiError from '../hoc/error/ApiError';\n\nimport { listQuestions, createQuestion } from '../services/Question';\n\nclass QuestionsPage extends PureComponent{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\t\t\tquestions: [],\n\t\t\tnewQuestion: '',\n\t\t\terror: false,\n\t\t\terrorMessage: '',\n        };\n    }\n\n\tfetchQuestions = async () => {\n\t\tconst response = await listQuestions();\n\t\tif(response.error){\n\t\t\tthis.setState({ errorMessage: response.message});\n\t\t\tthis.setState({ error : true });\n\t\t}else{\n\t\t\tthis.setState({ questions: [...response.questions]});\n\t\t\tthis.setState({ error : false });\n\t\t}\t\n\t};\n\n\tsaveQuestion = async (newQuestion, username) => {\n\t\tconst new_question = { text: newQuestion, user: username }\n\t\tconst response = await createQuestion(new_question);\n\t\tif(response.error){\n\t\t\tthis.setState({ errorMessage: response.message});\n\t\t\tthis.setState({ error : true });\n\t\t}else{\n\t\t\tthis.setState({ error : false });\n\t\t}\t\n\t}\n\t  \n\tonQuestionItemSelected = (id)=>{\n\t\tconst questionItemSelected = this.state.questions.filter( question => question.id === id);\n\t\tthis.props.onQuestionItemSelected(questionItemSelected[0]);\n\t};\n\n\tonNewQuestionChange = (value) =>{\n\t\tthis.setState({newQuestion: value});\n\t}\n\n\tonNewQuestionSubmit = async (event, username) => {\n\t\tevent.preventDefault();\n\t\tif (window.confirm('Tem certeza que deseja enviar pergunta?')){\n\t\t\tawait this.saveQuestion(this.state.newQuestion, username);\n\t\t\tawait this.fetchQuestions();\n\t\t\tthis.setState({ newQuestion: ''});\n\t\t}\n\t};\n\n\tcomponentDidUpdate = async (prevProps, prevState) =>{\n\t\tif(prevState.viewQuestionDetail !== this.state.viewQuestionDetail){\n\t\t\tawait this.fetchQuestions();\n\t\t}\n\t};\n\n    componentDidMount = async () => {\n\t\tawait this.fetchQuestions();\n    }\n\n    render(){\n\t\tconst { questions, newQuestion, error, errorMessage } = this.state;\n        return(\n           <>\n\t\t\t <ApiError error={error} message={errorMessage} >\n\t\t\t\t<QuestionsSummary\n\t\t\t\t\tonQuestionSelected={this.onQuestionItemSelected}\n\t\t\t\t\tnewQuestion={newQuestion} \n\t\t\t\t\tonNewQuestionChange={this.onNewQuestionChange}\n\t\t\t\t\tonNewQuestionSubmit = {this.onNewQuestionSubmit}   \n\t\t\t\t  \tquestions={questions} />\n\t\t\t </ApiError> \n           </>\n        );  \n    };\n}\n\nexport default QuestionsPage;"]},"metadata":{},"sourceType":"module"}