{"ast":null,"code":"var _jsxFileName = \"/home/pedrolocal/Desktop/Projects/ForumProject/forum-app/src/containers/QuestionsPage.js\";\nimport React, { PureComponent } from 'react';\nimport QuestionsSummary from '../components/QuestionsSummary/QuestionsSummary';\nimport QuestionDetailPage from './QuestionDetailPage';\nimport ApiError from '../components/Error/ApiError';\nimport styles from './QuestionsPage.module.css';\nimport { listQuestions, createQuestion } from '../services/Question';\n\nclass QuestionsPage extends PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.fetchQuestions = async () => {\n      const data = await listQuestions();\n\n      if (data.error) {\n        this.setState({\n          error: true\n        });\n      } else {\n        this.setState({\n          questions: [...data.questions]\n        });\n        this.setState({\n          error: false\n        });\n      }\n    };\n\n    this.saveQuestion = async (newQuestion, username) => {\n      const new_question = {\n        text: newQuestion,\n        user: username\n      };\n      await createQuestion(new_question);\n    };\n\n    this.onBackButtonClicked = () => {\n      this.setState({\n        viewQuestionDetail: false\n      });\n    };\n\n    this.onQuestionItemSelected = id => {\n      const questionItemSelected = this.state.questions.filter(question => question.id === id);\n      this.setState({\n        selectedQuestionItem: questionItemSelected[0]\n      });\n      this.setState({\n        viewQuestionDetail: true\n      });\n    };\n\n    this.onNewQuestionChange = value => {\n      this.setState({\n        newQuestion: value\n      });\n    };\n\n    this.onNewQuestionSubmit = async (event, username) => {\n      event.preventDefault();\n\n      if (window.confirm('Tem certeza que deseja enviar pergunta?')) {\n        await this.saveQuestion(this.state.newQuestion, username);\n        await this.fetchQuestions();\n        this.setState({\n          newQuestion: ''\n        });\n      }\n    };\n\n    this.componentDidUpdate = async (prevProps, prevState) => {\n      if (prevState.viewQuestionDetail !== this.state.viewQuestionDetail) {\n        await this.fetchQuestions();\n      }\n    };\n\n    this.componentDidMount = async () => {\n      await this.fetchQuestions();\n    };\n\n    this.state = {\n      questions: [],\n      selectedQuestionItem: {},\n      viewQuestionDetail: false,\n      newQuestion: '',\n      error: false\n    };\n  }\n\n  render() {\n    const {\n      error,\n      questions,\n      newQuestion,\n      viewQuestionDetail,\n      selectedQuestionItem\n    } = this.state;\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: styles.QuestionsPage,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 12\n      }\n    }, error ? /*#__PURE__*/React.createElement(ApiError, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 5\n      }\n    }) : /*#__PURE__*/React.createElement(React.Fragment, null, viewQuestionDetail ? /*#__PURE__*/React.createElement(QuestionDetailPage, {\n      backButtonClicked: this.onBackButtonClicked,\n      selectedQuestion: selectedQuestionItem,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 5\n      }\n    }) : /*#__PURE__*/React.createElement(QuestionsSummary, {\n      onQuestionSelected: this.onQuestionItemSelected,\n      newQuestion: newQuestion,\n      onNewQuestionChange: this.onNewQuestionChange,\n      onNewQuestionSubmit: this.onNewQuestionSubmit,\n      questions: questions,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 5\n      }\n    })));\n  }\n\n}\n\nexport default QuestionsPage;","map":{"version":3,"sources":["/home/pedrolocal/Desktop/Projects/ForumProject/forum-app/src/containers/QuestionsPage.js"],"names":["React","PureComponent","QuestionsSummary","QuestionDetailPage","ApiError","styles","listQuestions","createQuestion","QuestionsPage","constructor","props","fetchQuestions","data","error","setState","questions","saveQuestion","newQuestion","username","new_question","text","user","onBackButtonClicked","viewQuestionDetail","onQuestionItemSelected","id","questionItemSelected","state","filter","question","selectedQuestionItem","onNewQuestionChange","value","onNewQuestionSubmit","event","preventDefault","window","confirm","componentDidUpdate","prevProps","prevState","componentDidMount","render"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react';\nimport QuestionsSummary from '../components/QuestionsSummary/QuestionsSummary';\nimport QuestionDetailPage from './QuestionDetailPage';\nimport ApiError from '../components/Error/ApiError';\nimport styles from './QuestionsPage.module.css'\n\nimport { listQuestions, createQuestion } from '../services/Question';\n\nclass QuestionsPage extends PureComponent{\n\n    constructor(props) {\n        super(props);\n        this.state = {\n\t\t\tquestions: [],\n\t\t  \tselectedQuestionItem: {},\n\t\t\tviewQuestionDetail: false,\n\t\t\tnewQuestion: '',\n\t\t\terror: false\n        };\n    }\n\n\tfetchQuestions = async () => {\n\t\tconst data = await listQuestions();\n\t\tif(data.error){\n\t\t\tthis.setState( {error : true });\n\t\t}else{\n\t\t\tthis.setState({ questions: [...data.questions]});\n\t\t\tthis.setState( {error : false })\n\t\t}\t\n\t};\n\n\tsaveQuestion = async (newQuestion, username) => {\n\t\tconst new_question = { text: newQuestion, user: username }\n\t\tawait createQuestion(new_question);\n\t}\n\n\tonBackButtonClicked = () =>{\n\t\tthis.setState({ viewQuestionDetail: false});\n\t};\n\t  \n\tonQuestionItemSelected = (id)=>{\n\t\tconst questionItemSelected = this.state.questions.filter( question => question.id === id);\n\t\tthis.setState({ selectedQuestionItem: questionItemSelected[0]});\n\t\tthis.setState({ viewQuestionDetail: true});\n\t};\n\n\tonNewQuestionChange = (value) =>{\n\t\tthis.setState({newQuestion: value});\n\t}\n\n\tonNewQuestionSubmit = async (event, username) => {\n\t\tevent.preventDefault();\n\t\tif (window.confirm('Tem certeza que deseja enviar pergunta?')){\n\t\t\tawait this.saveQuestion(this.state.newQuestion, username);\n\t\t\tawait this.fetchQuestions();\n\t\t\tthis.setState({ newQuestion: ''});\n\t\t}\n\t};\n\n\tcomponentDidUpdate = async (prevProps, prevState) =>{\n\t\tif(prevState.viewQuestionDetail !== this.state.viewQuestionDetail){\n\t\t\tawait this.fetchQuestions();\n\t\t}\n\t};\n\n    componentDidMount = async () => {\n\t\tawait this.fetchQuestions();\n    }\n\n    render(){\n\t\tconst {error, questions, newQuestion, viewQuestionDetail , selectedQuestionItem} = this.state;\n        return(\n           <div className={styles.QuestionsPage}>\n\t\t\t { error ? \n\t\t\t <ApiError /> \n\t\t\t :\n\t\t\t <>{viewQuestionDetail? \n\t\t\t\t<QuestionDetailPage \n\t\t\t\t\t backButtonClicked={this.onBackButtonClicked}\n\t\t\t\t\t selectedQuestion={selectedQuestionItem} /> \n\t\t\t\t:  \n\t\t\t\t<QuestionsSummary\n\t\t\t\t\t onQuestionSelected={this.onQuestionItemSelected}\n\t\t\t\t\t newQuestion={newQuestion} \n\t\t\t\t\t onNewQuestionChange={this.onNewQuestionChange}\n\t\t\t\t\t onNewQuestionSubmit = {this.onNewQuestionSubmit}   \n\t\t\t\t\t questions={questions} /> }\n\t\t\t</>\n\t\t\t }\n\t\t\t   \n           </div>\n        );  \n    };\n}\n\nexport default QuestionsPage;"]},"metadata":{},"sourceType":"module"}